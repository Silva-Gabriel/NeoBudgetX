import java.time.LocalDate;
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) throws IllegalAccessException {
        var pessoa = new Pessoa(1L, "Mark", LocalDate.of(2000, 7, 8));
        var pessoas = new ArrayList<Pessoa>();

        // Adiciona a primeira pessoa a lista
        pessoas.add(pessoa);

        for (var person : pessoas)
        {
            // Mostra o objeto pessoa no console
            System.out.println(person);

            // Pegar a classe do objeto, em seguida pega todas as propriedades dos campos (método reflection)
            var fields = person.getClass().getDeclaredFields();

            // Foreach para iterar sobre as propriedades de cada campo
            for (var field : fields)
            {
                // Pega o nome das propriedades
                var fieldName = field.getName();
                var fieldValue = field.get(person);

                System.out.println(String.format("%s = %s", fieldName, fieldValue));
            }

            // caso exista algum objeto com id = 1, ele é removido
            pessoas.removeIf(x -> x.id == 1);

            var countRegisters = 0;

            do
            {
                countRegisters++;
            } while();
    }
}



import java.time.LocalDate;
import java.util.Date;

public class Pessoa {
    public Long id;
    public String name;
    public LocalDate birthday;

    public Pessoa(Long id, String name, LocalDate birthday)
    {
        this.id = id;
        this.name = name;
        this.birthday = birthday;
    }

    // Sobrescreve o método toString() usando polimorfismo
    @Override
    public String toString()
    {
        return String.format("%d | %s | %s", id, name, birthday);
    }
}
